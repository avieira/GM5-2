//abscisses
real a=0, L=1;
int N;
real alpha=1, beta=0;

cin>>N;

//Fonctions
func real k(real x){return x;};
func real g(real x){return (1+2*x-x*x)*exp(x);};
func real uEx(real x) {return (1-x)*exp(x);};

//Discrétisation
real pas=L/(N-1);
real [int] X(a:pas:L);
int n=X.n;
real [int] Vex(N);

for(int i=0;i<N;i++)
	Vex(i)=uEx(X(i));

real[int] K(N), G(N);
for(int i=0;i<N;i++){
	K(i)=k(X(i));
	G(i)=g(X(i));
}

//Remplissage matrice et vecteur source
real[int, int] A(N,N);
for(int i=0;i<N;i++)
	A(i,0:N-1)=0;

A(0,0)=1;
for(int i=1;i<N-1;i++){
	A(i,i-1)=-1;
	A(i,i+1)=-1;
	A(i,i)=2+pas*pas*K(i);
}
A(N-1,N-1)=1;

matrix M=A;
//set(M,solver=UMFPACK);
//set(M,solver=CG);
set(M,solver=GMRES);

real[int] Q(N);
Q(0)=alpha;
for(int i=1;i<N-1;i++)
	Q(i)=pas*pas*G(i);
Q(N-1)=beta;

real[int] V(N);
V=M^-1*Q;

//Sortie des résultats
{ofstream fout("resultat.dat");
for(int i=0;i<N;i++)
	fout<<X(i)<<" "<<V(i)<<" "<<Vex(i)<<endl;
fout<<endl<<endl;
}

real [int] err(N);
for(int i=0;i<N;i++)
	err(i)=abs(V(i)-Vex(i));

{ofstream ferr("erreur.dat");
ferr<<pas<<" "<<err.max<<endl;}

//exec("gnuplot -p plotTP1.gnu");
